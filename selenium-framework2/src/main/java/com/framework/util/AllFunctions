// Utility Class: DriverUtils.java
package com.framework.utils;
 
import org.openqa.selenium.WebDriver;
 
public class DriverUtils {
    private WebDriver driver;
 
    public DriverUtils(WebDriver driver) {
        this.driver = driver;
    }
 
    public void openURL(String url) {
        driver.get(url);
    }
 
    public String getTitle() {
        return driver.getTitle();
    }
 
    public void refreshPage() {
        driver.navigate().refresh();
    }
 
    public void closeBrowser() {
        driver.close();
    }
 
    public void quitDriver() {
        driver.quit();
    }
}
 
// Utility Class: WaitUtils.java
package com.framework.utils;
 
import org.openqa.selenium.*;
import org.openqa.selenium.support.ui.*;
 
import java.time.Duration;
 
public class WaitUtils {
    private WebDriver driver;
 
    public WaitUtils(WebDriver driver) {
        this.driver = driver;
    }
 
    public WebElement waitForElementVisible(By locator, int timeout) {
        WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(timeout));
        return wait.until(ExpectedConditions.visibilityOfElementLocated(locator));
    }
 
    public WebElement waitForElementClickable(By locator, int timeout) {
        WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(timeout));
        return wait.until(ExpectedConditions.elementToBeClickable(locator));
    }
 
    public boolean waitForPageTitle(String title, int timeout) {
        WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(timeout));
        return wait.until(ExpectedConditions.titleContains(title));
    }
}
 
// Utility Class: ElementUtils.java
package com.framework.utils;
 
import org.openqa.selenium.*;
import org.openqa.selenium.support.ui.Select;
 
public class ElementUtils {
    private WebDriver driver;
 
    public ElementUtils(WebDriver driver) {
        this.driver = driver;
    }
 
    public void click(By locator) {
        driver.findElement(locator).click();
    }
 
    public void sendKeys(By locator, String value) {
        driver.findElement(locator).sendKeys(value);
    }
 
    public String getText(By locator) {
        return driver.findElement(locator).getText();
    }
 
    public boolean isElementDisplayed(By locator) {
        return driver.findElement(locator).isDisplayed();
    }
 
    public void selectDropdownByVisibleText(By locator, String text) {
        new Select(driver.findElement(locator)).selectByVisibleText(text);
    }
}
 
// Utility Class: JavaScriptUtils.java
package com.framework.utils;
 
import org.openqa.selenium.*;
 
public class JavaScriptUtils {
    private WebDriver driver;
 
    public JavaScriptUtils(WebDriver driver) {
        this.driver = driver;
    }
 
    public void clickUsingJS(WebElement element) {
        ((JavascriptExecutor) driver).executeScript("arguments[0].click();", element);
    }
 
    public void scrollIntoView(WebElement element) {
        ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", element);
    }
 
    public void scrollBy(int x, int y) {
        ((JavascriptExecutor) driver).executeScript("window.scrollBy(arguments[0], arguments[1]);", x, y);
    }
}
 
// Utility Class: ScreenshotUtils.java
package com.framework.utils;
 
import org.openqa.selenium.*;
import org.apache.commons.io.FileUtils;
import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
 
public class ScreenshotUtils {
    public static String takeScreenshot(WebDriver driver, String testName) {
        String timestamp = new SimpleDateFormat("yyyyMMddHHmmss").format(new Date());
        File src = ((TakesScreenshot) driver).getScreenshotAs(OutputType.FILE);
        String path = "./reports/screenshots/" + testName + "_" + timestamp + ".png";
        try {
            FileUtils.copyFile(src, new File(path));
        } catch (IOException e) {
            e.printStackTrace();
        }
        return path;
    }
}